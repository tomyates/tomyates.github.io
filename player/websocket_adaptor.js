export class WebSocketAdaptor{constructor(e){for(var n in this.debug=!1,e)e.hasOwnProperty(n)&&(this[n]=e[n]);this.initWebSocketConnection()}initWebSocketConnection(e){this.connecting=!0,this.connected=!1,this.pingTimerId=-1,this.wsConn=new WebSocket(this.websocket_url),this.wsConn.onopen=()=>{this.debug&&console.debug("websocket connected"),this.pingTimerId=setInterval((()=>{this.sendPing()}),3e3),this.connected=!0,this.connecting=!1,this.callback("initialized"),void 0!==e&&e()},this.wsConn.onmessage=e=>{var n=JSON.parse(e.data);"start"==n.command?(this.debug&&console.debug("received start command"),this.webrtcadaptor.startPublishing(n.streamId)):"takeCandidate"==n.command?(this.debug&&(console.debug("received ice candidate for stream id "+n.streamId),console.debug(n.candidate)),this.webrtcadaptor.takeCandidate(n.streamId,n.label,n.candidate)):"takeConfiguration"==n.command?(this.debug&&console.debug("received remote description type for stream id: "+n.streamId+" type: "+n.type),this.webrtcadaptor.takeConfiguration(n.streamId,n.sdp,n.type,n.idMapping)):"stop"==n.command?(this.debug&&console.debug("Stop command received"),this.webrtcadaptor.closePeerConnection(n.streamId)):"error"==n.command?this.callbackError(n.definition):"notification"==n.command?(this.callback(n.definition,n),"play_finished"!=n.definition&&"publish_finished"!=n.definition||this.webrtcadaptor.closePeerConnection(n.streamId)):"streamInformation"==n.command||"roomInformation"==n.command?this.callback(n.command,n):"pong"==n.command?this.callback(n.command):"trackList"==n.command?this.callback(n.command,n):"connectWithNewId"==n.command?(this.multiPeerStreamId=n.streamId,this.join(n.streamId)):"peerMessageCommand"==n.command&&this.callback(n.command,n)},this.wsConn.onerror=e=>{this.connecting=!1,this.connected=!1,console.info(" error occured: "+JSON.stringify(e)),this.clearPingTimer(),this.callbackError("WebSocketNotConnected",e)},this.wsConn.onclose=e=>{this.connecting=!1,this.connected=!1,this.debug&&console.debug("connection closed."),this.clearPingTimer(),this.callback("closed",e)}}clearPingTimer(){-1!=this.pingTimerId&&(this.debug&&console.debug("Clearing ping message timer"),clearInterval(this.pingTimerId),this.pingTimerId=-1)}sendPing(){this.wsConn.send(JSON.stringify({command:"ping"}))}close(){this.wsConn.close()}send(e){0!=this.connecting||0!=this.connected?(this.wsConn.send(e),this.debug&&console.debug("sent message:"+e)):this.initWebSocketConnection((()=>{this.send(e)}))}isConnected(){return this.connected}isConnecting(){return this.connecting}}